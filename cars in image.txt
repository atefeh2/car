

  clc, clearvars, close all;

%%convert image to grayscale
  
  
  f = rgb2gray(imread('tr_hard1.jpg'));
  
  figure, imshow(f), title('Gray Image');
  
  
%% light up the image


  f = imadjust(f,[],[],0.5);

  figure, imshow(f), title('Image after Gamma Correction ');


% removing noise and smoothing the image 


  mask = ones(5) / (25);
  f_smooth = imfilter(f,mask);
  figure, imshow(f_smooth), title('Smoothed Image');


%% edge detection by using Sobel operator
  
  f_edge = edge(f_smooth, 'Sobel');
  figure, imshow(f_edge), title('Edges by Sobel');
  
  
%% thresholding

  f_edge = im2uint8(f_edge);
  level = graythresh(f_edge);
  f_th  = imbinarize(f_edge, level);
  figure, imshow(f_th), title('Image Thresholded');
  
  
%% creating structuring elements 

  
  se1 = strel('rectangle', [15 40]);
  se2 = strel('rectangle', [15 10]);


%% we use imclose to close spaces between correlated parts of edges.  


  f_close = imclose(f_th,se1);
  figure, imshow(f_close), title('Closed Image');
  
  
  
%% we use imopen to remove unwanted objects.  


  f_open = imopen(f_close,se2);
  figure, imshow(f_open), title('Opened Image');
  


%%Find connected components in binary image  


  cc1 = bwconncomp(f_open);
  
  
  
  
%%Measure properties of image regions
   
   
   stats1 = regionprops(cc1, {'Area','Eccentricity'});
   area = [stats1.Area];
   sumArea = 0;
   
   
   for i = 1 : cc1.NumObjects
      sumArea = sumArea + area(i);
    
   end

   avArea= sumArea / cc1.NumObjects;
   
   
%% Take the components which have an area larger than 25 percent of   



   idx = find([stats1.Area] > (avArea * 1 / 4)); 
   BW = ismember(labelmatrix(cc1), idx);

   figure, imshow(BW), title('Binary Image of Interested Components');
   
%% label binary image to get 'BoundingBox' properties of components   



   cc2 = bwconncomp(BW);
   stats2 = regionprops(cc2, 'BoundingBox');
   figure, imshow(f), title('Detected Vehicles');
   
   
   
%% represent each detected component with a rectangular    


  for i = 1 : cc2.NumObjects
     rectangle('Position', stats2(i).BoundingBox,'EdgeColor','r','LineWidth',2);
  end

   
   
   
   
   
   
   
   
   
   
   
   

  


  










  
